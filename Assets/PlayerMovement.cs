//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerMovement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerMovement"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""8dc7908d-76d4-4956-875b-2b69a6e020c9"",
            ""actions"": [
                {
                    ""name"": ""MovementInput"",
                    ""type"": ""Value"",
                    ""id"": ""f4fc90fd-e9a4-4a93-9a4b-c8b200118db7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ea04b8e3-431b-4b1d-b19c-495d1b28c1c8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f529e53a-63a1-4bb0-81af-8a5f8a3f13ed"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2825110a-a020-43ac-903e-3ffecdcc53e4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0678576a-88bd-42c5-81ae-f3686d6ffde4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""edaecf34-437e-4ddc-ae3a-0d044528f56f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Punch"",
            ""id"": ""5ff1bd1e-9e4d-4494-8be9-53a93bdff3f3"",
            ""actions"": [
                {
                    ""name"": ""PunchInput"",
                    ""type"": ""Button"",
                    ""id"": ""918daf1a-7795-42b5-8559-153fbf118c70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5aaf80d3-63ae-4001-9110-8613210d22c6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PunchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_MovementInput = m_Movement.FindAction("MovementInput", throwIfNotFound: true);
        // Punch
        m_Punch = asset.FindActionMap("Punch", throwIfNotFound: true);
        m_Punch_PunchInput = m_Punch.FindAction("PunchInput", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_MovementInput;
    public struct MovementActions
    {
        private @PlayerMovement m_Wrapper;
        public MovementActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovementInput => m_Wrapper.m_Movement_MovementInput;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @MovementInput.started += instance.OnMovementInput;
            @MovementInput.performed += instance.OnMovementInput;
            @MovementInput.canceled += instance.OnMovementInput;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @MovementInput.started -= instance.OnMovementInput;
            @MovementInput.performed -= instance.OnMovementInput;
            @MovementInput.canceled -= instance.OnMovementInput;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Punch
    private readonly InputActionMap m_Punch;
    private List<IPunchActions> m_PunchActionsCallbackInterfaces = new List<IPunchActions>();
    private readonly InputAction m_Punch_PunchInput;
    public struct PunchActions
    {
        private @PlayerMovement m_Wrapper;
        public PunchActions(@PlayerMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @PunchInput => m_Wrapper.m_Punch_PunchInput;
        public InputActionMap Get() { return m_Wrapper.m_Punch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PunchActions set) { return set.Get(); }
        public void AddCallbacks(IPunchActions instance)
        {
            if (instance == null || m_Wrapper.m_PunchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PunchActionsCallbackInterfaces.Add(instance);
            @PunchInput.started += instance.OnPunchInput;
            @PunchInput.performed += instance.OnPunchInput;
            @PunchInput.canceled += instance.OnPunchInput;
        }

        private void UnregisterCallbacks(IPunchActions instance)
        {
            @PunchInput.started -= instance.OnPunchInput;
            @PunchInput.performed -= instance.OnPunchInput;
            @PunchInput.canceled -= instance.OnPunchInput;
        }

        public void RemoveCallbacks(IPunchActions instance)
        {
            if (m_Wrapper.m_PunchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPunchActions instance)
        {
            foreach (var item in m_Wrapper.m_PunchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PunchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PunchActions @Punch => new PunchActions(this);
    public interface IMovementActions
    {
        void OnMovementInput(InputAction.CallbackContext context);
    }
    public interface IPunchActions
    {
        void OnPunchInput(InputAction.CallbackContext context);
    }
}
